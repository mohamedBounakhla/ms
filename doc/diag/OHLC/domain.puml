@startuml OHLC_Pure_Domain_Clarified

skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam classFontSize 14
skinparam classBackgroundColor #F0F8FF
skinparam classBorderColor #4682B4
skinparam packageBorderColor #778899
skinparam packageBackgroundColor transparent
skinparam ArrowColor #4682B4

title OHLC Domain - Pure Chart Data Representation

package "OHLC Domain" {

    class "Candlestick" as Candlestick {
        -id: String
        -symbol: Symbol
        -timestamp: Instant
        -interval: TimeInterval
        -open: Money
        -high: Money
        -low: Money
        -close: Money
        -volume: BigDecimal
        --
        +isBullish(): boolean
        +isBearish(): boolean
        +getBodySize(): Money
        +getRange(): Money
        +getTypicalPrice(): Money
        --
        +toChartData(): ChartData
        -validateOHLC(): void
    }

    class "OHLCData" as OHLCData {
        -id: String
        -symbol: Symbol
        -interval: TimeInterval
        -candles: List<Candlestick>
        -lastUpdated: Instant
        --
        +addCandle(candle: Candlestick): void
        +getAllCandles(): List<Candlestick>
        +getLatestCandle(): Optional<Candlestick>
        +getCandlesByTimeRange(start: Instant, end: Instant): List<Candlestick>
        --
        +getHighestPrice(): Optional<Money>
        +getLowestPrice(): Optional<Money>
        +getPriceChange(): Optional<Money>
        --
        +toChartSeries(): ChartSeries
        -validateCandle(candle: Candlestick): void
    }

    enum "TimeInterval" as TimeInterval {
        ONE_MINUTE("1m")
        FIVE_MINUTES("5m")
        FIFTEEN_MINUTES("15m")
        ONE_HOUR("1h")
        ONE_DAY("1d")
        --
        +getCode(): String
        +getMilliseconds(): long
        +alignTimestamp(timestamp: Instant): Instant
    }

    interface "ChartData" as ChartData {
        +getTime(): long
        +getOpen(): double
        +getHigh(): double
        +getLow(): double
        +getClose(): double
        +getVolume(): double
    }

    interface "ChartSeries" as ChartSeries {
        +getData(): List<ChartData>
        +getSymbol(): String
        +getInterval(): String
        +getName(): String
    }

    class "OHLCDataFactory" as OHLCDataFactory {
        <<static>>
        +createFromTransactions(symbol: Symbol, interval: TimeInterval, transactions: List<TransactionData>): OHLCData
        +createCandlestick(symbol: Symbol, interval: TimeInterval, timestamp: Instant, transactions: List<TransactionData>): Candlestick
        +aggregateTransactions(transactions: List<TransactionData>): OHLC
        -calculateOHLC(transactions: List<TransactionData>): OHLC
        -calculateVolume(transactions: List<TransactionData>): BigDecimal
    }

    class "OHLC" as OHLC {
        +open: Money
        +high: Money
        +low: Money
        +close: Money
        --
        +OHLC(open: Money, high: Money, low: Money, close: Money)
        +isValid(): boolean
    }

    class "TransactionData" as TransactionData {
        +timestamp: Instant
        +price: Money
        +quantity: BigDecimal
        +symbol: Symbol
        --
        +TransactionData(timestamp: Instant, price: Money, quantity: BigDecimal, symbol: Symbol)
        +getTotalValue(): Money
    }
}

package "Shared Domain" #LightGray {
    class "Symbol" as Symbol {
        -code: String
        -quoteCurrency: Currency
        --
        +getCode(): String
        +getQuoteCurrency(): Currency
    }

    class "Money" as Money {
        -amount: BigDecimal
        -currency: Currency
        --
        +getAmount(): BigDecimal
        +getCurrency(): Currency
        +add(Money): Money
        +isGreaterThan(Money): boolean
    }
}

' ===== RELATIONSHIPS =====

OHLCData "1" *--> "many" Candlestick : manages
OHLCData --> "1" Symbol : represents
OHLCData --> "1" TimeInterval : uses
Candlestick --> "1" Symbol : for
Candlestick --> "1" TimeInterval : interval
Candlestick --> "4" Money : OHLC prices

Candlestick ..> ChartData : converts to
OHLCData ..> ChartSeries : converts to

OHLCDataFactory ..> OHLCData : creates
OHLCDataFactory ..> Candlestick : creates
OHLCDataFactory --> TransactionData : processes
OHLCDataFactory ..> OHLC : uses

OHLC --> "4" Money : contains

note top of OHLCData
    **Pure Chart Data Domain**
    • NO knowledge of orders/transactions
    • NO event listening
    • NO external dependencies
    • ONLY represents chart data
    • Updated by external services
end note

note right of OHLCDataFactory
    **Data Aggregation**
    • Converts transaction data to OHLC
    • Aggregates by time intervals
    • Creates candlesticks from raw data
    • Called by external services
end note

note bottom of TransactionData
    **Simple Data Container**
    • NOT a domain entity
    • Just data from other domains
    • Used for aggregation only
end note

note left of Candlestick
    **Chart Data Entity**
    • Business logic for chart analysis
    • Self-converting to chart formats
    • NO knowledge of how it was created
    • Uses Money for price consistency
end note

@enduml