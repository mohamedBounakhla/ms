Complete Trading System API Documentation
Authentication Endpoints
User Management

POST /register - Create new user account
json{
  "username": "string",
  "password": "string"
}

Returns: Success message
Creates user with CUSTOMER role
Automatically creates associated portfolio


POST /login - Authenticate user
json{
  "username": "string",
  "password": "string"
}

Returns:

json{
  "token": "JWT_token_string",
  "refreshToken": "refresh_token_string",
  "username": "string",
  "role": "CUSTOMER|ADMIN"
}

POST /refresh - Refresh JWT token

Query param: ?token=refresh_token_string
Returns: New TokenResponseDTO with fresh tokens



Authentication Flow

User registers → Creates MSUser entity → Auto-creates Portfolio with ownerId = userId
User logs in → Receives JWT token
All subsequent requests include: Authorization: Bearer {token}
Token expires → Use refresh endpoint for new token

User Roles

CUSTOMER: Can manage own portfolio, place orders, view market data
ADMIN: Full system access, can view all portfolios, manage bots


Updated System Flow with Authentication
Complete User Journey
1. User Registration
   POST /register → Creates user account
   ↓
2. Automatic Portfolio Creation
   System creates portfolio with ownerId = username/userId
   ↓
3. User Login
   POST /login → Receives JWT token
   ↓
4. Access Protected Endpoints
   All requests include Authorization header
   ↓
5. Trading Operations
   - Deposit funds
   - Place orders
   - Monitor portfolio
Security Integration with BCs
Portfolio BC:

Links portfolios to authenticated users via ownerId
Only owner can access their portfolio endpoints
JWT token validates ownership

Order BC:

Orders linked to portfolios which are linked to users
User can only see/cancel their own orders

Trading Bots:

Each bot creates its own "user" identity
Bot portfolios separate from human user portfolios


Protected Endpoint Examples
All portfolio/order/bot endpoints require authentication:
bash# Login first
curl -X POST http://localhost:8080/login \
  -H "Content-Type: application/json" \
  -d '{"username":"trader1","password":"pass123"}'

# Use token for protected endpoints
curl -X GET http://localhost:8080/api/v1/portfolios/{portfolioId} \
  -H "Authorization: Bearer {JWT_TOKEN}"

Complete System Architecture with Auth
Frontend (React)
    ↓
Auth Layer (Spring Security + JWT)
    ↓
API Gateway (Routes to BCs)
    ├── User/Auth Service
    ├── Portfolio BC
    ├── Order BC
    ├── Order Book BC
    └── Trading Bot Module
Database Considerations

Users table separate from domain tables
Portfolio table has foreign key to user (ownerId)
Orders linked via portfolio ownership chain