Trading Platform API Documentation
Base URL
http://localhost:8080/api/v1
Authentication
Most endpoints require JWT Bearer token authentication.
Authorization: Bearer <token>

1. Authentication APIs
Login
httpPOST /login
Body:
json{
  "username": "string",
  "password": "string"
}
Response:
json{
  "token": "string",
  "expiresIn": 86400,
  "tokenType": "Bearer"
}
Register
httpPOST /register
Body:
json{
  "username": "string",
  "password": "string"
}
Response: 201 Created
Refresh Token
httpPOST /refresh?token={token}
Response:
json{
  "token": "string",
  "expiresIn": 86400,
  "tokenType": "Bearer"
}

2. Symbol Management APIs
Get All Symbols
httpGET /symbols
GET /symbols?type=CRYPTO
Query Parameters:

type (optional): CRYPTO, FOREX, STOCK, COMMODITY

Response:
json{
  "success": true,
  "message": "Symbols retrieved successfully",
  "data": [
    {
      "code": "BTC",
      "name": "Bitcoin",
      "description": "Bitcoin cryptocurrency",
      "assetType": "CRYPTO",
      "baseCurrency": "BTC",
      "quoteCurrency": "USD",
      "active": true,
      "minOrderSize": 0.0001,
      "maxOrderSize": 100,
      "tickSize": 0.01,
      "lotSize": 0.0001
    }
  ]
}
Get Single Symbol
httpGET /symbols/{code}
Response:
json{
  "success": true,
  "message": "Symbol retrieved successfully",
  "data": {
    "code": "BTC",
    "name": "Bitcoin",
    "assetType": "CRYPTO",
    "baseCurrency": "BTC",
    "quoteCurrency": "USD",
    "active": true
  }
}
Create Symbol (Admin Only)
httpPOST /symbols
Body:
json{
  "code": "AAPL",
  "name": "Apple Inc.",
  "description": "Apple stock",
  "assetType": "STOCK",
  "baseCurrency": "USD",
  "quoteCurrency": "USD",
  "minOrderSize": 1,
  "maxOrderSize": 10000,
  "tickSize": 0.01,
  "lotSize": 1
}
Update Symbol (Admin Only)
httpPUT /symbols/{code}
Body:
json{
  "name": "Updated Name",
  "minOrderSize": 0.001,
  "active": true
}
Deactivate Symbol (Admin Only)
httpDELETE /symbols/{code}

3. Portfolio APIs
Create Portfolio
httpPOST /portfolios
Body:
json{
  "portfolioId": "portfolio-123",
  "ownerId": "user-123"
}
Get Portfolio
httpGET /portfolios/{portfolioId}
Response:
json{
  "success": true,
  "data": {
    "portfolioId": "portfolio-123",
    "ownerId": "user-123",
    "cashBalances": {
      "USD": {"amount": 10000, "currency": "USD"}
    },
    "positions": {
      "BTC": 0.5
    },
    "totalValue": {"amount": 35000, "currency": "USD"}
  }
}
Get Portfolio Snapshot
httpGET /portfolios/{portfolioId}/snapshot
Deposit Cash
httpPOST /portfolios/{portfolioId}/cash/deposit
Body:
json{
  "amount": 10000,
  "currency": "USD"
}
Withdraw Cash
httpPOST /portfolios/{portfolioId}/cash/withdraw
Body:
json{
  "amount": 5000,
  "currency": "USD"
}
Get Cash Balance
httpGET /portfolios/{portfolioId}/cash/{currency}
Response:
json{
  "success": true,
  "data": {
    "currency": "USD",
    "available": 8000,
    "reserved": 2000,
    "total": 10000
  }
}

4. Order APIs
Place Buy Order
httpPOST /portfolios/{portfolioId}/orders/buy
Body:
json{
  "symbolCode": "BTC",
  "price": 45000,
  "currency": "USD",
  "quantity": 0.1
}
Place Sell Order
httpPOST /portfolios/{portfolioId}/orders/sell
Body:
json{
  "symbolCode": "BTC",
  "price": 46000,
  "currency": "USD",
  "quantity": 0.05
}

5. Market Data APIs
Get Market Depth
httpGET /market-data/depth/{symbol}?levels=10
Query Parameters:

levels: Number of price levels (1-50, default: 10)

Response:
json{
  "symbolCode": "BTC",
  "bidLevels": [
    {"price": 44900, "currency": "USD", "totalQuantity": 1.5, "orderCount": 3}
  ],
  "askLevels": [
    {"price": 45100, "currency": "USD", "totalQuantity": 2.0, "orderCount": 4}
  ],
  "spread": 200,
  "totalBidVolume": 5.5,
  "totalAskVolume": 6.2
}
Get Ticker
httpGET /market-data/ticker/{symbol}
Response:
json{
  "symbol": "BTC",
  "bidPrice": 44900,
  "bidQuantity": 0.5,
  "askPrice": 45100,
  "askQuantity": 0.3,
  "currency": "USD",
  "spread": 200
}
Get Market Overview
httpGET /market-data/overview
Get Active Symbols
httpGET /market-data/symbols
Response:
json["BTC", "ETH", "EURUSD", "GBPUSD"]
Get Order Book Summary
httpGET /market-data/summary/{symbol}

6. Chart Data APIs
Get OHLC Data
httpGET /charts/ohlc/{symbol}?interval=1m&from=2024-01-01T00:00:00&to=2024-01-02T00:00:00
Query Parameters:

interval: 1m, 5m, 15m, 1h, 1d
from: ISO datetime
to: ISO datetime (optional)

Response:
json[
  {
    "time": "2024-01-01T00:00:00",
    "open": 44000,
    "high": 44500,
    "low": 43800,
    "close": 44200,
    "volume": 125.5
  }
]

7. Trading Bot APIs
Create Bot
httpPOST /bots
Body:
json{
  "botName": "My Trading Bot",
  "initialCash": 10000,
  "strategy": "momentum",
  "symbolCode": "BTC",
  "maxOrderSize": 1,
  "minOrderSize": 0.01,
  "tickIntervalSeconds": 5,
  "riskTolerance": 0.5,
  "autoStart": true
}
Strategies: random, momentum
Get All Bots
httpGET /bots
Get Bot Status
httpGET /bots/{botId}
Response:
json{
  "success": true,
  "data": {
    "botId": "uuid",
    "portfolioId": "bot-portfolio-uuid",
    "botName": "My Trading Bot",
    "strategy": "momentum",
    "symbol": "BTC",
    "status": "RUNNING",
    "tradesExecuted": 15,
    "lastActionTime": "2024-01-01T12:00:00",
    "lastKnownPrice": 45000,
    "recentHistory": [
      "2024-01-01T11:55:00 - BUY 0.1000 BTC @ $44,900"
    ]
  }
}
Start Bot
httpPOST /bots/{botId}/start
Stop Bot
httpPOST /bots/{botId}/stop
Remove Bot
httpDELETE /bots/{botId}
Stop All Bots
httpPOST /bots/stop-all

8. WebSocket Endpoints
Connect
ws://localhost:8080/ws/market-data
Subscribe Topics
javascript// Order book updates
/topic/orderbook/{symbol}

// Ticker updates
/topic/ticker/{symbol}

// Candlestick updates
/topic/candles/{symbol}/{interval}

// Completed candles
/topic/candles/complete/{symbol}/{interval}

Error Responses
400 Bad Request
json{
  "success": false,
  "message": "Validation failed",
  "errors": ["Price must be positive", "Quantity required"]
}
401 Unauthorized
json{
  "success": false,
  "message": "Invalid token"
}
404 Not Found
json{
  "success": false,
  "message": "Resource not found"
}
500 Internal Server Error
json{
  "success": false,
  "message": "Internal server error"
}

Default Test Users (Dev Profile)

Username: cnam1, Password: password, Initial Balance: $100,000
Username: cnam2, Password: password, Initial Balance: $50,000


Rate Limits

No explicit rate limits in current implementation
WebSocket connections: Unlimited
Recommended: Implement rate limiting for production


Notes

All monetary amounts use BigDecimal precision
Timestamps are in ISO 8601 format
Symbol codes are case-insensitive (converted to uppercase)
Admin endpoints require ROLE_ADMIN
WebSocket uses STOMP protocol over SockJS